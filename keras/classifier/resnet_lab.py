'''https://github.com/fchollet/keras/blob/master/examples/cifar10_resnet.py

ResNet v1
[a] Deep Residual Learning for Image Recognition
https://arxiv.org/pdf/1512.03385.pdf

ResNet v2
[b] Identity Mappings in Deep Residual Networks
https://arxiv.org/pdf/1603.05027.pdf
'''
import os
import numpy as np
from easydict import EasyDict as edict
cfg = edict()
# Training parameters
cfg.data = '/your/image/path'
cfg.num_classes = 10
cfg.batch_size = 32
cfg.epochs = 200
cfg.data_augmentation = True
cfg.input_shape = (32, 32, 3)
# Subtracting pixel mean improves accuracy
cfg.sub_pixel_mean = True
# Model parameter
cfg.n = 3
cfg.version = 1  # 1(ResNet v1), 2(ResNet v2)
cfg.depth = cfg.n * 6 + 2
cfg.model_type = 'ResNet%dv%d' % (cfg.depth, cfg.version)
# Other
cfg.save_dir = '/tmps/cifar10'
cfg.model_name = '%s_model.{epoch:03d}.h5' % cfg.model_type


if not os.path.isdir(cfg.data):
    # Load the CIFAR10 data.
    import keras
    from keras.datasets import cifar10
    (x_train, y_train), (x_test, y_test) = cifar10.load_data()
    if cfg.sub_pixel_mean:
        x_train_mean = np.mean(x_train, axis=0)
        x_train -= x_train_mean
        x_test -= x_train_mean
    print(' *', x_train.shape, x_train.shape[0], x_test.shape[0], y_train.shape)
    # Convert class vectors to binary class matrices.
    y_train = keras.utils.to_categorical(y_train, num_classes)
    y_test = keras.utils.to_categorical(y_test, num_classes)
else:
    pass
if not os.path.isdir(cfg.save_dir):
    os.makedirs(cfg.save_dir)


def lr_schedule(epoch):
    '''Learning Rate Schedule
    Learning rate is scheduled to be reduced after 80, 120, 160, 180 epochs.
    Called automatically every epoch as part of callbacks during training.
    # Arguments
        epoch (int): The number of epochs
    # Returns
        lr (float32): learning rate
    '''
    lr = 1e-3
    if epoch > 180:
        lr *= 0.5e-3
    elif epoch > 160:
        lr *= 1e-3
    elif epoch > 120:
        lr *= 1e-2
    elif epoch > 80:
        lr *= 1e-1
    return lr


# Create model
from pyhej.keras.classifier.resnet import resnet_v1, resnet_v2
if cfg.version == 2:
    model = resnet_v2(input_shape=cfg.input_shape, depth=cfg.depth)
else:
    model = resnet_v1(input_shape=cfg.input_shape, depth=cfg.depth)
from keras.optimizers import Adam
model.compile(loss='categorical_crossentropy',
              optimizer=Adam(lr=lr_schedule(0)),
              metrics=['accuracy'])
#model.summary()


# Prepare callbacks for model saving and for learning rate adjustment.
checkpoint = ModelCheckpoint(filepath=os.path.join(cfg.save_dir, cfg.model_name),
                             monitor='val_acc',
                             verbose=1,
                             save_best_only=True)
lr_scheduler = LearningRateScheduler(lr_schedule)
lr_reducer = ReduceLROnPlateau(factor=np.sqrt(0.1),
                               cooldown=0,
                               patience=5,
                               min_lr=0.5e-6)
callbacks = [checkpoint, lr_reducer, lr_scheduler]


# Run training, with or without data augmentation.
print('Using real-time data augmentation.')
# This will do preprocessing and realtime data augmentation:
datagen = ImageDataGenerator(
    rotation_range=40,  # randomly rotate images in the range (deg 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally
    height_shift_range=0.1,  # randomly shift images vertically
    shear_range = 0.1,
    zoom_range = 0.1,
    horizontal_flip=True,  # randomly flip images
    vertical_flip=False,  # randomly flip images
    rescale=None)
# Fit the model on the batches generated by datagen.flow().
model.fit_generator(datagen.flow(x_train, y_train, batch_size=cfg.batch_size),
                    steps_per_epoch=x_train.shape[0] // cfg.batch_size,
                    epochs=cfg.epochs,
                    validation_data=(x_test, y_test),
                    callbacks=callbacks)


# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])


#model.save_weights('first_try.h5')